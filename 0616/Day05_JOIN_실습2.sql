-- JOIN
-- 두개 이상의 테이블에서 연관성을 가지고 있는 데이터들을
-- 따로 분류하여 새로운 가상의 테이블을 만듬
-- -> 여러 테이블의 레코드를 조합하여 하나의 레코드로 만듬
-- ANSI 표준 구문
SELECT EMP_NAME "사원명", DEPT_CODE "부서명"
FROM EMPLOYEE
JOIN DEPARTMENT ON DEPT_CODE = DEPT_ID;
SELECT COUNT(*) FROM EMPLOYEE;

-- 오라클 조인 구문
SELECT EMP_NAME "사원명", DEPT_TITLE "부서명"
FROM EMPLOYEE, DEPARTMENT WHERE DEPT_CODE = DEPT_ID;

--11. 사원명과, 부서명을 출력하세요.
--   부서코드가 D5이면 총무부, D6이면 기획부, D9이면 영업부로 처리하시오.(case 사용)
--   단, 부서코드가 D5, D6, D9 인 직원의 정보만 조회하고, 부서코드 기준으로 오름차순 정렬함.
-- JOIN으로 하기
SELECT EMP_NAME "사원명", DEPT_CODE "부서명"
FROM EMPLOYEE
JOIN DEPARTMENT ON DEPT_CODE = DEPT_ID;
SELECT COUNT(*)FROM EMPLOYEE;

-- JOIN 없이 하기
SELECT EMP_NAME "사원명"
, CASE 
  WHEN DEPT_CODE = 'D5' THEN '총무부' 
  WHEN DEPT_CODE = 'D6' THEN '기획부' 
  WHEN DEPT_CODE = 'D9' THEN '영업부' 
  END "부서명"
FROM EMPLOYEE;



-- @실습문제1
-- 부서명과 지역명을 출력하세요. DEPARTMENT, LOCATION 테이블 이용.
SELECT DEPT_TITLE,LOCAL_NAME FROM DEPARTMENT
JOIN LOCATION ON LOCATION_ID = LOCAL_CODE;


-- 사원명과 부서명 출력하세요
-- EMPLOYEE / DEPARTMENT
-- DEPT_CODE / DEPT_ID


-- @실습문제2
-- 사원명과 직급명을 출력하세요.
-- EMPLOYEE / JOB
-- JOB_CODE / JOB_CODE (직급코드)
SELECT EMP_NAME, JOB_NAME
FROM EMPLOYEE
JOIN JOB ON EMPLOYEE.JOB_CODE = JOB.JOB_CODE;
-- ORA-00918: column ambiguously defined 
-- 해결방법1 : 컬럼앞에 테이블명 붙여주기!
SELECT EMP_NAME, JOB_NAME
FROM EMPLOYEE
JOIN JOB USING(JOB_CODE);
-- 해결방법2 : USING 사용하기

-- 실습문제3
-- 지역명과 국가명을 출력하세요.
-- LOCATION  / NATIONAL
-- NATIONAL_CODE / NATIONAL_CODE
-- 1.어떤 테이블에 있는지 확인
-- 2.두 개를 연결할 수 있는 데이터 컬럼이 있는지 확인
-- 3.JOIN 구문을 이용해서 쿼리문 작성
SELECT LOCAL_NAME, NATIONAL_NAME
FROM LOCATION L1
JOIN NATIONAL N1 ON L1.NATIONAL_CODE = N1.NATIONAL_CODE;
--JOIN NATIONAL USING(NATIONAL_CODE);

-- ============= JOIN의 종류 ============
-- 1. INNER JOIN : 일반적으로 사용하는 조인(교집합)
-- 2. OUTER JOIN : 모두 출력하는 조인(합집합)
-- 사원명과 부서명을 출력하시오.
SELECT EMP_NAME, DEPT_TITLE
FROM EMPLOYEE E1
JOIN DEPARTMENT D1 ON E1.DEPT_CODE = D1.DEPT_ID;
-- 이렇게 교집합으로 출력되는 것이 INNER JOIN임.
SELECT EMP_NAME, DEPT_TITLE
FROM EMPLOYEE E1
LEFT OUTER JOIN DEPARTMENT D1 ON E1.DEPT_CODE = D1.DEPT_ID;
-- 이렇게 합집합으로 출력되느 것이 OUTER JOIN임.
-- LEFT OUTER JOIN은 오른쪽 테이블이 가지고있는 모든 데이터를 출력하는 조인
SELECT EMP_NAME, DEPT_TITLE
FROM EMPLOYEE E1
RIGHT OUTER JOIN DEPARTMENT D1 ON E1.DEPT_CODE = D1.DEPT_ID;
-- RIGHT OUTER JOIN은 오른쪽 테이블이 가지고있는 모든 데이터를 출력하는 조인
SELECT EMP_NAME, DEPT_TITLE
FROM EMPLOYEE E1
FULL OUTER JOIN DEPARTMENT D1 ON E1.DEPT_CODE = D1.DEPT_ID;
-- FULL OUTER JOIN은 모든 테이블이 가지고 있는 모든 데이터를 출력하는 조인
-- INNER + LEFT + RIGHT JOIN한 결과
-- 21 + 2 + 3 = 26


SELECT EMP_NAME, DEPT_CODE FROM EMPLOYEE;
-- 오라클 전용 구문 JOIN 변경 (이거쓴사람별로없음 ANSI많이씀)
-- 1. INNER JOIN
SELECT EMP_NAME, DEPT_TITLE
FROM EMPLOYEE,DEPARTMENT WHERE DEPT_CODE = DEPT_ID;

-- 2. LEFT OUTER JOIN
SELECT EMP_NAME, DEPT_TITLE
FROM EMPLOYEE,DEPARTMENT WHERE DEPT_CODE = DEPT_ID(+);

-- 3. RIGHT OUTER JOIN
SELECT EMP_NAME, DEPT_TITLE
FROM EMPLOYEE,DEPARTMENT WHERE DEPT_CODE(+) = DEPT_ID;

-- 4. FULL OUTER JOIN
-- 존재하지 않음



-- =================== 조인의 종류2 =======================
-- 동등조인,상호조인,셀프조인,다중조인,
-- 다중조인 : 여러개의 조인문을 한번에 사용할 수 있음.
-- 사원명, 부서명, 근무하고 있는 지역명을 출력
-- 1. EMPLOYEE, DEPARTMENT(DEPT_CODE, DEPT_ID)
-- 2. DEPARTMENT, LOCATION (LOACATION_ID, LOCAL_CODE)

-- 1.
SELECT EMP_NAME, DEPT_TITLE
FROM EMPLOYEE JOIN DEPARTMENT ON DEPT_CODE = DEPT_ID;

-- 2.
SELECT DEPT_TITLE, LOCAL_NAME
FROM DEPARTMENT JOIN LOCATION ON LOCATION_ID = LOCAL_CODE;

--SELECT EMP_NAME, DEPT_CODE FROM EMPLOYEE;
--SELECT DEPT_ID, DEPT_TITLE, LOCATION_ID FROM DEPARTMENT;
--SELECT LOCAL_CODE, LOCAL_NAME FROM LOCATION;

-- 다중조인 예제
SELECT EMP_NAME, DEPT_TITLE, LOCAL_NAME
FROM EMPLOYEE E1
JOIN DEPARTMENT D1 ON E1.DEPT_CODE = D1.DEPT_ID
JOIN LOCATION L1 ON D1.LOCATION_ID = L1.LOCAL_CODE;

--RIGHT JOIN DEPARTMENT ON DEPT_CODE = DEPT_ID
--RIGHT JOIN LOCATION ON LOCATION_ID = LOCAL_CODE;
--LEFT JOIN DEPARTMENT ON DEPT_CODE = DEPT_ID
--LEFT JOIN LOCATION ON LOCATION_ID = LOCAL_CODE;


--@실습문제1
-- 직급이 대리이면서, ASIA 지역에 근무하는 직원 조회
-- 사번, 이름 ,직급명, 부서명, 근무지역명, 급여를 출력하시오
SELECT 
  EMP_ID "사번"
  ,EMP_NAME "이름"
  ,JOB_NAME "직급명"
  ,DEPT_TITLE "부서명"
  ,LOCAL_NAME "근무지역명"
  ,TO_CHAR(SALARY, 'L999,999,999') "급여"
FROM EMPLOYEE
JOIN JOB USING(JOB_CODE)
JOIN DEPARTMENT ON DEPT_CODE = DEPT_ID -- 여기까지부서명
JOIN LOCATION ON LOCATION_ID = LOCAL_CODE -- 요까지 근무지역명
WHERE JOB_NAME = '대리' AND LOCAL_NAME LIKE 'ASIA%';


-- 2023년 12월 25일이 무슨 요일 조회하는 쿼리문을 작성해주세요.
SELECT TO_CHAR(TO_DATE('20231225'), 'day') FROM DUAL;

-- @JOIN 종합실습
--1. 주민번호가 1970년대 생이면서 성별이 여자이고, 
--성이 전씨인 직원들의 사원명, 주민번호, 부서명, 직급명을 조회하시오.
SELECT EMP_NAME, EMP_NO, DEPT_TITLE, JOB_NAME
FROM EMPLOYEE
LEFT JOIN DEPARTMENT ON DEPT_CODE = DEPT_ID
LEFT JOIN JOB USING(JOB_CODE)
WHERE (SUBSTR(EMP_NO,1,2) BETWEEN 70 AND 79) 
AND SUBSTR(EMP_NO,8,1) IN ('2', '4');

--2. 이름에 '형'자가 들어가는 직원들의 사번, 사원명, 부서명을 조회하시오.
SELECT EMP_ID, EMP_NAME, DEPT_TITLE
FROM EMPLOYEE
LEFT JOIN DEPARTMENT ON DEPT_CODE = DEPT_ID
WHERE EMP_NAME LIKE '%형%';

--3. 해외영업부에 근무하는 사원명, 직급명, 부서코드, 부서명을 조회하시오.
SELECT EMP_NAME, JOB_NAME, DEPT_CODE, DEPT_TITLE
FROM EMPLOYEE
JOIN JOB USING(JOB_CODE)
JOIN DEPARTMENT ON DEPT_CODE = DEPT_ID
WHERE DEPT_TITLE LIKE '해외영업_부';

--4. 보너스포인트를 받는 직원들의 사원명, 보너스포인트, 부서명, 근무지역명을 조회하시오.
SELECT EMP_NAME "사원명", NVL(BONUS,0) "보너스포인트", DEPT_TITLE "부서명", LOCAL_NAME "근무지역명"
FROM EMPLOYEE
LEFT JOIN DEPARTMENT ON DEPT_CODE = DEPT_ID
LEFT JOIN LOCATION ON LOCATION_ID = LOCAL_CODE
WHERE BONUS IS NOT NULL;

--5. 부서코드가 D2인 직원들의 사원명, 직급명, 부서명, 근무지역명을 조회하시오.
SELECT EMP_NAME , JOB_NAME, DEPT_TITLE, LOCAL_NAME
FROM EMPLOYEE
JOIN JOB USING(JOB_CODE)
JOIN DEPARTMENT ON DEPT_CODE = DEPT_ID
JOIN LOCATION ON LOCATION_ID = LOCAL_CODE
WHERE DEPT_CODE = 'D2';
--WHERE JOB_CODE = 'J2';

--6. 급여등급테이블의 최대급여(MAX_SAL)보다 많이 받는 직원들의 사원명, 직급명, 급여, 연봉을 조회하시오.
-- (사원테이블과 급여등급테이블을 SAL_LEVEL컬럼기준으로 조인할 것)
-- 데이터 없음
-- S2 5999999 -> 6200000 (600만원이상받는사람잇나없나 -> 없어서 데이터없음)
SELECT EMP_NAME "사원명", JOB_NAME "직급명", SALARY "급여", SALARY*12 "연봉"
FROM EMPLOYEE
JOIN JOB USING(JOB_CODE)
JOIN SAL_GRADE USING(SAL_LEVEL)
WHERE SALARY > MAX_SAL;

--7. 한국(KO)과 일본(JP)에 근무하는 직원들의 사원명, 부서명, 지역명, 국가명을 조회하시오.
SELECT EMP_NAME, DEPT_TITLE, LOCAL_NAME, NATIONAL_NAME
FROM EMPLOYEE
JOIN DEPARTMENT ON DEPT_CODE = DEPT_ID
JOIN LOCATION ON LOCATION_ID = LOCAL_CODE
JOIN NATIONAL USING(NATIONAL_CODE)
--WHERE NATIONAL_NAME IN ('한국', '일본');
WHERE NATIONAL_CODE IN ('KO', 'JP');



--8. 보너스포인트가 없는 직원들 중에서 직급이 차장과 사원인 직원들의 사원명, 직급명, 급여를 조회하시오. 단, join과 IN 사용할 것


--9. 재직중인 직원과 퇴사한 직원의 수를 조회하시오.



























